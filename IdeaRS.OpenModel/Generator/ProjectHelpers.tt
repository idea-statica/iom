<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="envdte" #>
<#@ assembly name="envdte80" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="EnvDTE" #>
<#+


    public static List<CodeClass> GetAllClasses(EnvDTE.ProjectItems items)
    {
        var res = new List<CodeClass>();
        foreach(EnvDTE.ProjectItem item in GetProjectItemsRecursively(items))
        {
            if (item.FileCodeModel == null) continue;
            var cls = FindClass(item.FileCodeModel.CodeElements);
            if(cls != null)
            {
                Debug.WriteLine("Add class:" + cls.FullName.ToString() + " / " +  cls.Name.ToString());
                res.Add(cls);
            }
        }
        return res;
    }

    public static List<CodeEnum> GetAllEnums(EnvDTE.ProjectItems items)
    {
        var res = new List<CodeEnum>();
        foreach(EnvDTE.ProjectItem item in GetProjectItemsRecursively(items))
        {
            if (item.FileCodeModel == null) continue;
            var cls = FindEnum(item.FileCodeModel.CodeElements);
            if(cls != null)
            {
                Debug.WriteLine("Add Enum:" + cls.FullName.ToString() + " / " +  cls.Name.ToString());
                res.Add(cls);
            }
        }
        return res;
    }

    public static void GetAllCodeElement(EnvDTE.ProjectItems items, Dictionary<string, CodeElement> res)
    {
        //var res = new Dictionary<string, CodeElement>();
        foreach(EnvDTE.ProjectItem item in GetProjectItemsRecursively(items))
        {
            if (item.FileCodeModel == null) continue;
            var ce = FindCodeElement(item.FileCodeModel.CodeElements);
            if(ce != null)
            {
                //Debug.WriteLine("Add Struct:" + ce.FullName.ToString() + " / " +  ce.Name.ToString());
                if(!res.ContainsKey(ce.FullName.ToString()))
                    res.Add(ce.FullName.ToString(), ce);
            }
        }
        //return res;
    }

    public static List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
    {
        var ret = new List<EnvDTE.ProjectItem>();
        if (items == null) return ret;
        foreach(EnvDTE.ProjectItem item in items)
        {
            ret.Add(item);
            ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
        }
        return ret;
    }

    public static CodeInterface FindInterface(CodeElements elements)
    {
        foreach (CodeElement element in elements)
        {
            CodeInterface myInterface = element as CodeInterface;
            if (myInterface != null)
                return myInterface;
            myInterface = FindInterface(element.Children);
            if (myInterface != null)
                return myInterface;
        }
        return null;
    }

    public static CodeEnum FindEnum(CodeElements elements)
    {
        foreach (CodeElement element in elements)
        {
            CodeEnum myCodeEnum = element as CodeEnum;
            if (myCodeEnum != null)
                return myCodeEnum;
            myCodeEnum = FindEnum(element.Children);
            if (myCodeEnum != null)
                return myCodeEnum;
        }
        return null;
    }

    public static CodeElement FindCodeElement(CodeElements elements)
    {
        foreach (CodeElement element in elements)
        {
            CodeEnum myCodeEnum = element as CodeEnum;
            if (myCodeEnum != null)
            {
                return (element);
            }
            myCodeEnum = FindCodeEnum(element.Children);
            if (myCodeEnum != null)
                return (myCodeEnum as CodeElement);

            CodeStruct myCodeStruct = element as CodeStruct;
            if (myCodeStruct != null)
            {
                return (element);
            }
            myCodeStruct = FindCodeStruct(element.Children);
            if (myCodeStruct != null)
                return (myCodeStruct as CodeElement);

            CodeClass myClass = element as CodeClass;
            if (myClass != null)
                return myClass as CodeElement;
            myClass = FindClass(element.Children);
            if (myClass != null)
                return myClass as CodeElement;

            CodeInterface myInterface = element as CodeInterface;
            if (myInterface != null)
                return myInterface as CodeElement;
            myInterface = FindInterface(element.Children);
            if (myInterface != null)
                return myInterface as CodeElement;
        }
        return null;
    }

    public static CodeStruct FindCodeStruct(CodeElements elements)
    {
        foreach (CodeElement element in elements)
        {
            CodeStruct myCodeStruct = element as CodeStruct;
            if (myCodeStruct != null)
            {
                return (element as CodeStruct);
            }
            myCodeStruct = FindCodeStruct(element.Children);
            if (myCodeStruct != null)
                return (myCodeStruct as CodeStruct);

        }
        return null;
    }

    public static CodeEnum FindCodeEnum(CodeElements elements)
    {
        foreach (CodeElement element in elements)
        {
            CodeEnum myCodeEnum = element as CodeEnum;
            if (myCodeEnum != null)
            {
                return (element as CodeEnum);
            }
            myCodeEnum = FindCodeEnum(element.Children);
            if (myCodeEnum != null)
                return (myCodeEnum as CodeEnum);

        }
        return null;
    }

    public static CodeClass FindClass(CodeElements elements)
    {
        foreach (CodeElement element in elements)
        {
            CodeClass myClass = element as CodeClass;
            if (myClass != null)
                return myClass;
            myClass = FindClass(element.Children);
            if (myClass != null)
                return myClass;
        }
        return null;
    }

    public static ProjectItem FindSolutionItemByName(DTE dte, string name, bool recursive)
    {
        ProjectItem projectItem = null;
        foreach (Project project in dte.Solution.Projects)
        {
            projectItem = FindProjectItemInProject(project, name, recursive);

            if (projectItem != null)
            {
                break;
            }
        }
        return projectItem;
    }

    public static ProjectItem FindProjectItemInProject(Project project, string name, bool recursive)
    {
        ProjectItem projectItem = null;

        if (project.Kind != EnvDTE.Constants.vsProjectKindSolutionItems)
        {
            if (project.ProjectItems != null && project.ProjectItems.Count > 0)
            {
                //List<CodeClass> res = GetAllClasses(project.ProjectItems);
                return null;
            }
        }
        else
        {
            // if solution folder, one of its ProjectItems might be a real project
            foreach (ProjectItem item in project.ProjectItems)
            {
                Project realProject = item.Object as Project;

                if (realProject != null)
                {
                    projectItem = FindProjectItemInProject(realProject, name, recursive);

                    if (projectItem != null)
                    {
                        break;
                    }
                }
            }
        }

        return projectItem;
    }

    public static Project FindProjectInSolution(DTE dte, string name)
    {
        foreach (Project project in dte.Solution.Projects)
        {
            if(project == null)
            {
                continue;
            }

            Project foundProj = FindProjectByName(project, name);

            if (foundProj != null)
            {
                return foundProj;
            }
        }
        return null;
    }

    public static Project FindProjectByName(Project project, string name)
    {
        if (project.Kind != EnvDTE.Constants.vsProjectKindSolutionItems)
        {
            Debug.WriteLine(project.Name);
            if(project.Name.Equals(name))
            {
                return project;
            }
        }
        else
        {
            // if solution folder, one of its ProjectItems might be a real project
            foreach (ProjectItem item in project.ProjectItems)
            {
                Project realProject = item.Object as Project;

                if (realProject != null)
                {
                    Project foundProj = FindProjectByName(realProject, name);

                    if (foundProj != null)
                    {
                        return foundProj;
                    }
                }
            }
        }
        return null;
    }

    public static string FormatComment(string docComment, string prefix)
    {
        StringBuilder sb = new StringBuilder();
        if(docComment == null) return "";
        string[] lines = docComment.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);
        if(lines.Length > 2)
        {
            for(int i = 1; i < lines.Length - 1; i++)
            {
                sb.AppendLine(prefix + "/// " + lines[i]);
            }
        }

        return sb.ToString();
    }
#>
