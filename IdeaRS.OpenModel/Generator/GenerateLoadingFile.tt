<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".cst" #>
<#+


    public class CodePropertyIDEA
    {
        public EnvDTE.CodeProperty myCodeProperty;
        public EnvDTE.CodeElements Attributes;
        public bool  IsReferenced;
        public bool  IsReferencedInList;
        public EnvDTE.CodeElement CodeElementInList;
        public EnvDTE.CodeElement CodeElementBack;
        public bool  IsList;
        public EnvDTE.vsCMElement te;
        public EnvDTE.CodeVariable myCodeVariable;
        public CodePropertyIDEA()
        {
            IsReferenced = false;
            IsReferencedInList = false;
        }
        public override string ToString()
        {
            StringBuilder debugBuilder = new StringBuilder();
            if (myCodeProperty != null)
            {
                debugBuilder.AppendLine("myCodeProperty.Name :" + myCodeProperty.Name);
                debugBuilder.AppendLine("myCodeProperty.Type.CodeType.Kind :" + myCodeProperty.Type.CodeType.Kind.ToString());
                debugBuilder.AppendLine("myCodeProperty.Type.AsFullName :" + myCodeProperty.Type.AsFullName);
            }
            string ss = string.Empty;
            return ss;
        }

    }

    public class CodeElementIDEA 
    {
        public EnvDTE.CodeElement  CodeElement;  // Name CombiInput
        public List<CodePropertyIDEA>  ListCodePropertyIDEA;
        public List<CodeElementIDEA>  ListCodeElementIDEABases;
        public CodeElementIDEA()
        {
            ListCodePropertyIDEA = new List<CodePropertyIDEA>();
            ListCodeElementIDEABases = new List<CodeElementIDEA>();
        }
    }


    Dictionary<string, CodeElementIDEA> clsPropDictionary = new Dictionary<string, CodeElementIDEA>();   
    // Key např. CI.StructModel.Loading.CombiInput
    //Dictionary<string, CodeElementIDEA> clsPropDictionaryBT = new Dictionary<string, CodeElementIDEA>();
    Dictionary<string, EnvDTE.CodeElement> structInBTProject = null;

    StringBuilder debugBuilder = new StringBuilder();
    StringBuilder utXMLBuilder = new StringBuilder();
    string XMLAtt = "";

    private void GenerateLoadingFile()
    {
        var serviceProvider = (IServiceProvider)this.Host;
        // Get the automation root object
        var dte = (EnvDTE.DTE)serviceProvider.GetService(typeof(EnvDTE.DTE));
        structInBTProject = new Dictionary<string, CodeElement>();

        Project foundProjBT = FindProjectInSolution(dte, "CI.BasicTypes");
        GetAllCodeElement(foundProjBT.ProjectItems, structInBTProject);

	
        //	List<CodeClass> classInBTProject = null;
        //	classInBTProject = GetAllClasses(foundProjBT.ProjectItems);

        Project projLoading = FindProjectInSolution(dte, "CI.Loading");
        GetAllCodeElement(projLoading.ProjectItems, structInBTProject);
        //
        Project projStructuralElements = null;
        projStructuralElements = FindProjectInSolution(dte, "CI.StructuralElements");
        GetAllCodeElement(projStructuralElements.ProjectItems, structInBTProject);

        Project projGeometry2D = null;
        //	projGeometry2D = FindProjectInSolution(dte, "CI.Geometry2D");
        //	GetAllCodeElement(projGeometry2D.ProjectItems, structInBTProject);

        Project projGeometry3D = null;
        projGeometry3D = FindProjectInSolution(dte, "CI.Geometry3D");
        GetAllCodeElement(projGeometry3D.ProjectItems, structInBTProject);

        AddToDebug("  ***** Hledám Klice Ahoj");
        foreach (var item in structInBTProject)
        {
            AddToDebug("Posranej Klič " + "[" + item.Key + "]");
        }


        utXMLBuilder.AppendLine("using System;");
        utXMLBuilder.AppendLine("using System.Collections.Generic;");
        utXMLBuilder.AppendLine("using System.Linq;");
        utXMLBuilder.AppendLine("using System.Text;");
        utXMLBuilder.AppendLine("using System.Threading.Tasks;");
        //	utXMLBuilder.AppendLine("using CI.DataModel;");
        //	utXMLBuilder.AppendLine("using CI.StructModel;");
        //	utXMLBuilder.AppendLine("using IdeaRS.SimpleStructModel;");
        utXMLBuilder.AppendLine("");

        utXMLBuilder.AppendLine("namespace IdeaRS.SimpleStructModel");
        utXMLBuilder.AppendLine("{");
        utXMLBuilder.AppendLine("\tpublic partial class SimpleStructModelFactory");
        utXMLBuilder.AppendLine("\t{");
        utXMLBuilder.AppendLine("\t\tprivate SimpleStructModel SimpleStructModel;");
        utXMLBuilder.AppendLine("\t\tpublic SimpleStructModelFactory(SimpleStructModel simpleStructModel)");
        utXMLBuilder.AppendLine("\t\t{");
        utXMLBuilder.AppendLine("\t\t\tthis.SimpleStructModel = simpleStructModel;");
        utXMLBuilder.AppendLine("\t\t}");

        if(foundProjBT != null )
        {
            WriteLine("using System;");
            WriteLine("using System.Collections.Generic;");

            WriteLine("namespace IdeaRS.SimpleStructModel");
            WriteLine("{");

            WriteLine("\tpublic class IdeaXMLSSMAttribute : Attribute");
            WriteLine("\t{");
            WriteLine("\t\tstring Name { get; set;}");

            WriteLine("\t\tpublic IdeaXMLSSMAttribute( string name)");
            WriteLine("\t\t{");
            WriteLine("\t\t\tthis.Name = name;");
            WriteLine("\t\t}");
            WriteLine("\t}");

            WriteLine("\tpublic class ReferenceElement");
            WriteLine("\t{");
            WriteLine("\t\tpublic System.Int32 Id { get; set; }");
            WriteLine("\t\tpublic String Typ { get; set; }");
            WriteLine("\t}");

            //List<CodeClass> classesInProject = GetAllClasses(projLoading.ProjectItems);
            List<List<CodeClass>> classesAll = new List<List<CodeClass>>();

            List<CodeClass> classesInProject2;

            if (projStructuralElements  != null)
            {
                classesInProject2 = GetAllClasses(projStructuralElements.ProjectItems);
                classesAll.Add(classesInProject2);
            }

            classesInProject2 = GetAllClasses(projLoading.ProjectItems);
            classesAll.Add(classesInProject2);

            //classesInProject2 = GetAllClasses(projGeometry2D.ProjectItems);
            //classesAll.Add(classesInProject2);

            classesInProject2 = GetAllClasses(projGeometry3D.ProjectItems);
            classesAll.Add(classesInProject2);
            try 
            {	        
		
                // get all shapes
                foreach (List<CodeClass> classesInProject in classesAll)
                {
	 
                    foreach(var cls in classesInProject)
                    {
                        if(!cls.Name.Equals("CombiInputEC")) {
                           // continue;
                        }
                        Debug.WriteLine("class name :" + cls.FullName.ToString() + " / " +  cls.Name.ToString());
                        //bool ignoreClass = false;
                        CodeElement codeElement = cls as CodeElement;
                        //StringBuilder sb = new StringBuilder();
                        //RecurseElements(cls.Members, 0, sb);
                        //Debug.WriteLine(sb.ToString());
                        bool addClass = ExAttribute(cls.Attributes, "IdeaRS.IdeaXML.IdeaAddToXMLAttribute");
                        //AddToDebug("ExAttribute" + ignoreClass.ToString());
                        //ignoreClass = false;
                        //if(cls.Attributes.Count > 0)
                        //{
                        //	AddToDebug("cls.Attributes.Count" + cls.Attributes.Count.ToString());
                        //	// Debug.WriteLine("class name :" + cls.FullName.ToString() + " / " +  cls.Name.ToString());
                        //	foreach(CodeAttribute att in cls.Attributes)
                        //	{
                        //		AddToDebug("Attributes.Count" + att.FullName.ToString());
                        //		if(att.FullName == "IdeaRS.IdeaXML.IdeaXMLIgnoreClass")
                        //		{
                        //			AddToDebug("nasel Atribute");
                        //			ignoreClass = true;
                        //			break;
                        //		}
                        //	}
                        //}
                        if(addClass)
                        {
                            if(codeElement is CodeClass)
                            {
                                //CodeClass myClass = codeElement as CodeClass;
                                AddCodeClassToRecord(codeElement, true);
                            }
                        }
                    }
                }

                Dictionary<string, Tuple<CodeElement, List<CodeProperty>>> dict = new Dictionary<string, Tuple<CodeElement, List<CodeProperty>>>();
                WriteLine("\tpublic class SimpleStructModel");
                WriteLine("\t{");
                WriteLine("\t\tpublic SimpleStructModel()");
                WriteLine("\t\t{");
                foreach(var rec in clsPropDictionary)
                {
                    if(!(rec.Value.CodeElement is CodeEnum))
                    {
                        WriteLine("\t\t\t" + rec.Value.CodeElement.Name +" = new List<" + rec.Value.CodeElement.Name + XMLAtt + ">();");
                    }
                }
                WriteLine("\t\t}");

                foreach(var rec in clsPropDictionary)
                {
                    if(!(rec.Value.CodeElement is CodeEnum))
                    {
                        WriteLine("\t\tpublic List<"+rec.Value.CodeElement.Name + XMLAtt +"> " + rec.Value.CodeElement.Name +"{ get; set;}");
                    }
                }
                WriteLine("\t}");

                AddToDebug("  ***** Start AddElementToFile ***** ");
                foreach(var rec in clsPropDictionary)
                {
                    List<CodeProperty> listCodePr = new List<CodeProperty>();
                    foreach (CodePropertyIDEA item in rec.Value.ListCodePropertyIDEA)
                    {
                        if (item.myCodeProperty != null)
                        {
                            listCodePr.Add(item.myCodeProperty);
                        }
                    }
                    dict.Add(rec.Key, new Tuple<CodeElement, List<CodeProperty>>(rec.Value.CodeElement, listCodePr));
                    AddElementToFile(rec, utXMLBuilder);
                }
		
                //CallContext.SetData("SimpleLoadingFactory.Parameter", dict);
                //ProcessTemplate("SimpleLoadingFactory.tt", "SimpleLoadingFactory.cs");

            }
            catch
            {
                AddToDebug("  ***** CRASH ***** ");
                var managerdebug = TemplateFileManager.Create(this);
                managerdebug.StartHeader(); 
                managerdebug.StartNewFile("DebugInfo.generated.txt", "IdeaRS.SimpleStructModel", "Debug", "tcs2");
                WriteLine(debugBuilder.ToString());
                managerdebug.Process();
                return;
		
            }

            WriteLine("}");
            WriteLine("");
            WriteLine("");

            //            var manager = TemplateFileManager.Create(this);
            //            manager.StartHeader(); 
            //
            //            //foreach(var cl in ret)
            //            //{
            //            //manager.StartNewFile(cl.Name.ToString(), "IdeaRS.SimpleStructModel", "Test");
            //            manager.StartNewFile("StructModelFactoryFromXML.generated.cs", "IdeaRS.StructModelFromXML", "", "tcs3");
            //            WriteLine("using System;");
            //            //WriteLine("using Microsoft.Practices.Unity;");
            //            WriteLine("using System.Collections.Generic;");
            //            WriteLine("using System.Linq;");
            //            WriteLine("using System.Text;");
            //            WriteLine("using System.Threading.Tasks;");
            //            WriteLine("using CI.DataModel;");
            //            WriteLine("using CI.StructModel;");
            //            WriteLine("using IdeaRS.SimpleStructModel;");
            //            WriteLine("");
            //            WriteLine("namespace IdeaRS.StructModelFromXML");
            //            WriteLine("{");
            //            WriteLine("	public class StructModelFactoryFromXML");
            //            WriteLine("	{");
            //            WriteLine("		public StructModelFactoryFromXML(IStructuralModel structuralModel)");
            //            WriteLine("		{");
            //            WriteLine("			this.structuralModel = structuralModel;");
            //            WriteLine("		}");
            //            WriteLine("		private IStructuralModel structuralModel;");
            //
            //            foreach(var rec in clsPropDictionary)
            //            {
            //                WriteLine("");
            //                if(rec.Value.CodeElement is CodeStruct)
            //                {
            //                    WriteLine(string.Format("			public {0} CreateSM{1}(SimpleElementBase simpleElement)", rec.Key, rec.Value.CodeElement.Name));
            //                    WriteLine("			{");
            //                    WriteLine("				Type smClsType = simpleElement.GetStructClsType();");
            //                    WriteLine(string.Format("				{0} res = new {0}();", rec.Key));
            //                    //WriteLine("				simpleElement.CopyToSM(res);");
            //                    WriteLine("				return res;");
            //                    WriteLine("			}");
            //                }
            //                else
            //                {
            //                    WriteLine(string.Format("			public {0} CreateSM{1}({1}"+ XMLAtt +" simpleElement)", rec.Key, rec.Value.CodeElement.Name));
            //                    WriteLine("			{");
            //                    WriteLine("				Type smClsType = simpleElement.GetStructClsType();");
            //                    WriteLine(string.Format("				{0} res = Activator.CreateInstance(smClsType) as {0};", rec.Key));
            //                    foreach (CodePropertyIDEA prop in rec.Value.ListCodePropertyIDEA)
            //                    {
            //                        if(prop.myCodeProperty != null)
            //                        {
            //                            if(prop.myCodeProperty.Name == "this")
            //                                continue;
            //                            if (prop.IsList)
            //                            {
            //                                string propListText;
            //                                propListText = string.Format("        res.{0} = new System.Collections.Generic.List<{1}>();",prop.myCodeProperty.Name, prop.CodeElementBack.FullName);		WriteLine(propListText);
            //                            }
            //                            else
            //                            {
            //                                string propCopyText = string.Empty;
            //                                if (prop.myCodeProperty.Setter != null)
            //                                {
            //                                    string T = string.Empty;
            //                                    if (prop.myCodeProperty.Name == "Type")
            //                                    {
            //                                        T = "T";
            //                                    }
            //
            //                                    switch(prop.myCodeProperty.Type.CodeType.Kind)
            //                                    {
            //                                        case vsCMElement.vsCMElementEnum:
            //												
            //                                            propCopyText = string.Format("        res.{0} = ({1})simpleElement.{2};", prop.myCodeProperty.Name, prop.myCodeProperty.Type.AsFullName, prop.myCodeProperty.Name + T);
            //                                            WriteLine(propCopyText);
            //                                            break;
            //                                        case vsCMElement.vsCMElementInterface:
            //                                            if (!prop.IsReferenced)
            //                                            {
            //                                                if (prop.CodeElementBack == null)
            //                                                {
            //                                                    WriteLine("        { // nemám Back objekt");
            //                                                    WriteLine(string.Format("	        // !!! ERROR  IContainer<{0}> con= null;", prop.myCodeProperty.Name));
            //                                                    WriteLine("        }");
            //                                                }
            //                                                else
            //                                                {
            //                                                    WriteLine("        {");
            //                                                    WriteLine(string.Format("	        IContainer<{0}> con= null;", prop.CodeElementBack.FullName));
            //                                                    //WriteLine(string.Format("        res.{0} = simpleElement.{1};", prop.myCodeProperty.Name, prop.myCodeProperty.Name + T));
            //                                                    WriteLine(string.Format("	        {0} v = null;", prop.CodeElementBack.FullName));
            //                                                    WriteLine(string.Format("	        con.GetElements().TryGetValue(simpleElement.{0}, out v);", prop.myCodeProperty.Name + T));
            //                                                    WriteLine(string.Format("	        res.{0} = v;", prop.myCodeProperty.Name));
            //                                                    WriteLine("        }");
            //                                                }
            //                                            }
            //                                            else
            //                                            {
            //                                                propCopyText = string.Format("        res.{0} = simpleElement.{1};", prop.myCodeProperty.Name, prop.myCodeProperty.Name + T);
            //                                            }
            //                                            break;
            //                                        case vsCMElement.vsCMElementClass:
            //                                            //WriteLine(string.Format("	        // !!! ERROR  vsCMElementClass"));
            //                                            if (prop.IsReferenced)
            //                                            {
            //                                                if(prop.myCodeProperty.Type.AsFullName == "System.String")
            //                                                {
            //                                                    propCopyText = string.Format("        res.{0} = simpleElement.{1};", prop.myCodeProperty.Name, prop.myCodeProperty.Name + T);
            //                                                }
            //                                                else
            //                                                {
            //                                                    propCopyText = string.Format("        res.{0} = new {1}();", prop.myCodeProperty.Name, prop.myCodeProperty.Type.AsFullName);
            //                                                    WriteLine(propCopyText);
            //                                                    //InitVector3DInSM(simpleElement.VecZ, res.VecZ);
            //                                                    //WriteLine(string.Format("	      Init{0}(simpleElement.{1}, res.{1});", prop.myCodeProperty.Type.AsFullName, prop.myCodeProperty.Name));
            //                                                }
            //                                            }
            //                                            else
            //                                            {
            //                                                WriteLine(string.Format("	        // mame problém jak class vytáhnout jako non Referenced {0}", prop.myCodeProperty.Name));
            //                                            }
            //                                            break;
            //                                        case vsCMElement.vsCMElementStruct:
            //                                            if (prop.IsReferenced)
            //                                            {
            //                                                WriteLine(string.Format("	      res.{0} = new {1}();", prop.myCodeProperty.Name, prop.myCodeProperty.Type.AsFullName));
            //                                                WriteLine(string.Format("	      simpleElement.{0}.CopyToSM(res.{0});", prop.myCodeProperty.Name));
            //                                            }
            //                                            else
            //                                            {
            //                                                propCopyText = string.Format("        res.{0} = simpleElement.{1};", prop.myCodeProperty.Name, prop.myCodeProperty.Name + T);
            //                                                WriteLine(propCopyText);
            //                                            }
            //                                            break;
            //                                    }
            //                                }
            //                            }
            //                        }
            //                        if(prop.myCodeVariable != null)
            //                        {
            //                            if(prop.myCodeVariable.Access == vsCMAccess.vsCMAccessPublic)
            //                            {
            //                                string propCopyText = string.Format("      res.{0} = simpleElement.{0};", prop.myCodeVariable.Name);
            //                                WriteLine(propCopyText);
            //                            }
            //                        }
            //                    }
            //                    WriteLine("				return res;");
            //                    WriteLine("			}");
            //
            //                }
            //
            //            }
            //            WriteLine("		}");
            //            WriteLine("}");
            //            //Here is some content for file #
            //            //}
            //            manager.Process();
            //
			
            utXMLBuilder.AppendLine("\t}");
            utXMLBuilder.AppendLine("}");

            var managerdebugFactoryXML = TemplateFileManager.Create(this);
            managerdebugFactoryXML.StartHeader(); 
            managerdebugFactoryXML.StartNewFile("UT_XML_Builder.generated.cs", "UT_StructuralModelTools", "", "ut");
            WriteLine(utXMLBuilder.ToString());
            managerdebugFactoryXML.Process();
            

            var managerdebug2 = TemplateFileManager.Create(this);
            managerdebug2.StartHeader(); 
            managerdebug2.StartNewFile("DebugInfo.generated.txt", "IdeaRS.SimpleStructModel", "Debug", "tcs2");
            WriteLine(debugBuilder.ToString());
            managerdebug2.Process();

            //SampleTemplate template = new SampleTemplate();
            //template.clsPropDictionary = clsPropDictionary;
            //template.Output.File = @"StructModelFactoryFromXML.generated.cs";
            //template.Output.Project = @"..\IdeaRS.StructModelFromXML\IdeaRS.StructModelFromXML.csproj";
            //template.Render();

        }
    }

    void AddCodeClassToRecord(EnvDTE.CodeElement cls, bool canAdd)
    {
        AddToDebug(" [AddCodeClassRecord "+ cls.FullName + "]");
        CodeElementIDEA clsRecord;
        if(!clsPropDictionary.TryGetValue(cls.FullName, out clsRecord))
        {
            clsRecord = new CodeElementIDEA();
            clsRecord.CodeElement = cls;
            clsPropDictionary.Add(cls.FullName, clsRecord);
            FillCodeClassRecord(cls, clsRecord, canAdd);
        }
    }

    int intFillCodeClassRecord = 0;
    void FillCodeClassRecord(EnvDTE.CodeElement cls, CodeElementIDEA clsRecord, bool canAdd)
    {
        AddToDebug("FillCodeClassRecord " + intFillCodeClassRecord.ToString() + " * "+ cls.Name);
        intFillCodeClassRecord++;

        CodeElements members = null;
        CodeElements bases = null;

        if(cls is CodeClass)
        {
            members = (cls as CodeClass).Members;
            bases = (cls as CodeClass).Bases;
        }
        if(cls is CodeStruct)
        {
            members = (cls as CodeStruct).Members;
            bases = (cls as CodeStruct).Bases;
        }
        if(cls is CodeInterface)
        {
            members = (cls as CodeInterface).Members;
            bases = (cls as CodeInterface).Bases;
        }
        if(cls is CodeEnum)
        {
            members = (cls as CodeEnum).Members;
            bases = (cls as CodeEnum).Bases;
        }
        if(!(cls is CodeEnum))
        {
            foreach(EnvDTE.CodeElement cb in bases)
            {
                CodeElementIDEA clsRecordTst;
                if(cb.FullName == "CI.DataModel.ElementWithAttributes") continue;
                if(cb.FullName == "CI.DataModel.PersistentBase") continue;
                if(cb.FullName == "CI.DataModel.ElementBase") continue;
                if(cb.FullName == "Perst.Persistent") continue;
                if(cb.Name == "ValueType") continue;
                //if(cb is CodeClass)
                //{
                //if((cb as CodeClass).IsAbstract) continue;
                //}
                //
                if(!clsPropDictionary.TryGetValue(cb.FullName, out clsRecordTst))
                {
                    CodeElementIDEA clsRecordB = new CodeElementIDEA();
                    clsRecordB.CodeElement = cb;
                    clsPropDictionary.Add(cb.FullName, clsRecordB);
                    FillCodeClassRecord(cb, clsRecordB, canAdd);
                    clsRecord.ListCodeElementIDEABases.Add(clsRecordB);
                }
                else
                {
                    clsRecord.ListCodeElementIDEABases.Add(clsRecordTst);
                }
            }
        }
        foreach (EnvDTE.CodeElement ce in members)
        {
            AddToDebug("Member Name : " + " / " + ce.Name);
            var myCodeVariable = ce as CodeVariable;
            if (myCodeVariable != null)
            {
                bool ignoreProp = ExAttribute(myCodeVariable.Attributes, "IdeaRS.IdeaXML.IdeaXMLIgnorePropertyAttribute")/* || ExAttribute(myCodeVariable.Attributes, "System.Xml.Serialization.XmlIgnoreAttribute")*/;
                if(!ignoreProp) {
                    CodePropertyIDEA cp = new CodePropertyIDEA();
                    cp.myCodeVariable = myCodeVariable;
                    cp.Attributes = myCodeVariable.Attributes;
                    cp.te = EnvDTE.vsCMElement.vsCMElementVariable;
                    clsRecord.ListCodePropertyIDEA.Add(cp);
                }

            }
            var prop = ce as CodeProperty;
            if (prop != null)
            {
                if (prop.Setter == null)
                {
                    AddToDebug("Nemí nutno toto řešit, nemá setter : " + " / " + prop.Type.AsFullName);
                    continue;
                }
                AddToDebug("CodeProperty prop.Type.AsFullName : " + " / " + prop.Type.AsFullName);

                bool ignoreProp = ExAttribute(prop.Attributes, "IdeaRS.IdeaXML.IdeaXMLIgnorePropertyAttribute")/* || ExAttribute(prop.Attributes, "System.Xml.Serialization.XmlIgnoreAttribute")*/;
                if(!ignoreProp) {
                    CodePropertyIDEA cpV = new CodePropertyIDEA();
                    cpV.myCodeProperty = prop;
                    cpV.Attributes = prop.Attributes;
                    cpV.te = GetCMElement(prop);
                    if(cpV.te == vsCMElement.vsCMElementInterface)
                    {
                        if(prop.Type.CodeType.Name.ToString() == "IEnumerable" || prop.Type.CodeType.Name.ToString() == "IList")
                        {
                            if (prop.Type.AsFullName.Contains('<'))
                            {
                                string firstArgument = prop.Type.AsFullName.Split('<', '>')[1];
                                AddNewRecord(firstArgument, canAdd);
                            }
                            else
                            {
                                AddNewRecord(cpV.myCodeProperty.Type.AsFullName, canAdd);
                            }
                        }
                        else
                        {
                            AddNewRecord(cpV.myCodeProperty.Type.AsFullName, canAdd);
                        }
                    }
                    if(cpV.te == vsCMElement.vsCMElementEnum)
                    {
                        AddToDebug("AddNewRecord : " + " / " + cpV.myCodeProperty.Type.AsFullName);
                        AddNewRecord(cpV.myCodeProperty.Type.AsFullName, canAdd);
                    }
                    if(cpV.te == vsCMElement.vsCMElementStruct)
                    {
                        AddNewRecord(cpV.myCodeProperty.Type.AsFullName, canAdd);
                    }
                    if(cpV.te == vsCMElement.vsCMElementClass)
                    {
                        if(prop.Type.CodeType.Name.ToString() == "List" || prop.Type.CodeType.Name.ToString() == "IList" ) 
                        {
                            if (prop.Type.AsFullName.Contains('<'))
                            {
                                string firstArgument = prop.Type.AsFullName.Split('<', '>')[1];
                                AddNewRecord(firstArgument, canAdd);
                            }
                            else
                            {
                                AddNewRecord(cpV.myCodeProperty.Type.AsFullName, canAdd);
                            }
                        }
                        else
                        {
                            AddNewRecord(cpV.myCodeProperty.Type.AsFullName, canAdd);
                        }

                    }
                    clsRecord.ListCodePropertyIDEA.Add(cpV);
                }
            }
        }

    }

    private void AddNewRecord(string firstArgument, bool canAdd)
    {
        CodeElement st;
        structInBTProject.TryGetValue(firstArgument, out st);

        if (st == null)
        {
            return;
        }

        if (st is EnvDTE.CodeInterface)
        {
            AddToDebug("Hledám Interface to record "+ firstArgument+ "[" + st.Name + "]");
            EnvDTE.CodeElement stC =  FindClassFromInterface(firstArgument);
            if (stC != null)
            {
                st = stC;
                AddToDebug("Nové Full name "+ firstArgument+ " /" + stC.FullName);
                firstArgument = stC.FullName;
            }
        }
        CodeElementIDEA myRec;
        if(!clsPropDictionary.TryGetValue(firstArgument, out myRec))
        {
            AddCodeClassToRecord(st, canAdd);
        }
    }

    private static string CamelCase(string name) 
    {
        if (name.StartsWith("ID", StringComparison.Ordinal))
        {
            return name;
        }
 
        return name.Substring(0, 1).ToLowerInvariant() + name.Substring(1);
    }
    bool ExAttribute(EnvDTE.CodeElements attributes, string attS)
    {
        if(attributes != null)
        {
            foreach(CodeAttribute att in attributes)
            {
                //AddToDebug("COMPARE att.FullName  " + att.FullName + " / " + attS);
                if(att.FullName == attS)
                {
                    //AddToDebug("prý je stejné");
                    return true;
                }
            }
        }
        return false;
    }
    string  GetTypeNameMain(CodePropertyIDEA Idaprop, ref string attribute, ref string defaultInit, ref bool isNew)
    {
        string ret = Idaprop.myCodeProperty.Type.AsFullName;
        attribute = string.Empty;
        defaultInit = string.Empty;
        string prepis = string.Empty;
        if(Idaprop.myCodeProperty != null && Idaprop.myCodeProperty.Type != null ) { 
            if(Idaprop.myCodeProperty.Type.CodeType != null) {
                bool exA = ExAttribute(Idaprop.Attributes, "IdeaRS.IdeaXML.IdeaXMLDoNotConvertAsReferenceAttribute");
                AddToDebug(" [property "+ Idaprop.myCodeProperty.Type.CodeType.Kind.ToString() + " - " + Idaprop.myCodeProperty.Type.CodeType.Name.ToString() + "]");
                AddToDebug("  " + Idaprop.myCodeProperty.Type.AsFullName + " / " + Idaprop.myCodeProperty.Name + " asReference " + exA.ToString());
                CodeElement stO;
                switch(Idaprop.myCodeProperty.Type.CodeType.Kind)
                {
                    case vsCMElement.vsCMElementEnum:
                        //Idaprop.CodeElementBack = stO;
                        //structInBTProject.TryGetValue(Idaprop.myCodeProperty.Type.AsFullName, out stO);
                        //if(stO != null)
                        //{
                        //attribute = "[IdeaXMLSSM(\"" + stO.Name+ "\")]  /* enum */ ";
                        //}
                        //else
                        //{
                        //attribute = "[IdeaXMLSSM(\"" + Idaprop.myCodeProperty.Type.CodeType.Name+ "\")]  /* enum  nemám name*/ ";
                        //}
                        return Idaprop.myCodeProperty.Type.CodeType.Name;
                    case vsCMElement.vsCMElementInterface:
                        if(Idaprop.myCodeProperty.Type.CodeType.Name.ToString() == "IEnumerable" || Idaprop.myCodeProperty.Type.CodeType.Name.ToString() == "IList")
                        {
                            string firstArgument = Idaprop.myCodeProperty.Type.AsFullName.Split('<', '>')[1];
                            AddToDebug("Hledám Interface  pro IList  "+ firstArgument + "  " +  exA.ToString());
                            structInBTProject.TryGetValue(firstArgument, out stO);
                            if(stO == null)
                            {
                                AddToDebug(" a nic jsem nenašel");
                            }
                            CodeElement st;
                            st = stO;
                            if(st == null)
                            {
                                AddToDebug(" Jakési divné - nic jsem nenašel");
                            }
                            if(st != null && exA == false)
                            {
                                AddToDebug(" cosi našel");
                                if (st is EnvDTE.CodeInterface)
                                {
                                    AddToDebug("Hledám Interface  pro IList"+ firstArgument+ "[" + st.Name + "]");
                                    EnvDTE.CodeElement stC =  FindClassFromInterface(firstArgument);
                                    if (stC != null)
                                    {
                                        st = stC;
                                        //attribute = "[IdeaXMLSSM(\"" + st.Name+ "\")]";
                                        prepis ="";// "/* prepis Interface */";
                                    }
                                }
                                Idaprop.IsList = true;
                                Idaprop.IsReferencedInList = true;
                                Idaprop.CodeElementInList = st;
                                Idaprop.CodeElementBack = stO;
                                defaultInit = " = new System.Collections.Generic.List<" + st.Name + XMLAtt +">();";
                                return "System.Collections.Generic.List<" + st.Name + XMLAtt +">" + prepis;
                            }
                            else
                            {
                                Idaprop.CodeElementBack = stO;
                                Idaprop.IsReferenced = true;
                                EnvDTE.CodeElement stC =  FindClassFromInterface(firstArgument);
                                if (stC != null)
                                {
                                    defaultInit = " = new System.Collections.Generic.List<ReferenceElement>();";
                                }
                                return "System.Collections.Generic.List<ReferenceElement>";
                            }
                        }
                        CodeElement stC3;
                        structInBTProject.TryGetValue(Idaprop.myCodeProperty.Type.AsFullName, out stO);
                        stC3 = stO;
                        prepis = string.Empty;
                        if(stC3 != null && !exA)
                        {
                            if (stC3 is EnvDTE.CodeInterface)
                            {
                                AddToDebug("Hledám Interface pro cosi "+ Idaprop.myCodeProperty.Type.AsFullName + "[" + stC3.Name + "]");
                                EnvDTE.CodeElement stCc =  FindClassFromInterface(Idaprop.myCodeProperty.Type.AsFullName);
                                if (stCc != null)
                                {
                                    stC3 = stCc;
                                    prepis ="";// "/* prepis Interface */";
                                    defaultInit = " = new " + Idaprop.myCodeProperty.Type.CodeType.Name + "();";
                                    isNew = true;
                                    //attribute = "[IdeaXMLSSM(\"" + Idaprop.myCodeProperty.Type.CodeType.Name+ "\")]";
                                }
                            }
                            Idaprop.CodeElementBack = stO;
                            Idaprop.IsReferenced = true;
                            defaultInit = " = SimpleStructModelFactory.Create" + stC3.Name + XMLAtt +"();";
                            return stC3.Name + XMLAtt;
                        }
                        else
                        {
                            Idaprop.CodeElementBack = stO;
                            defaultInit = " = new ReferenceElement();";
                            //attribute = "[IdeaXMLSSM(\"" + Idaprop.myCodeProperty.Type.CodeType.Name+ "\")]";
                            return "ReferenceElement";
                        }
                    case vsCMElement.vsCMElementClass:
                        if(Idaprop.myCodeProperty.Type.CodeType.Name.ToString() == "List") // public List<ICombiItem> Items
                        {
                            string firstArgument = Idaprop.myCodeProperty.Type.AsFullName.Split('<', '>')[1];
                            structInBTProject.TryGetValue(firstArgument, out stO);
                            AddToDebug("firstArgument "+ firstArgument+ "[" + "]");
                            CodeElement st;
                            st = stO;
                            prepis = string.Empty;
                            if(st != null && !exA)
                            {
                                if (st is EnvDTE.CodeInterface)
                                {
                                    AddToDebug("Hledám Interface pro List"+ firstArgument+ "[" + st.Name + "]");
                                    EnvDTE.CodeElement stC1 =  FindClassFromInterface(firstArgument);
                                    if (stC1 != null)
                                    {
                                        st = stC1;
                                        defaultInit = " = SimpleStructModelFactory.Create" + st.Name + "();";
                                        //attribute = "[IdeaXMLSSM(\"" + st.Name+ "\")]";
                                        AddToDebug("attribute   "+ attribute );
                                        prepis ="";// "/* prepis Interface */";
                                    }
                                }
                                Idaprop.IsList = true;
                                Idaprop.IsReferencedInList = true;
                                Idaprop.CodeElementInList = st;
                                Idaprop.CodeElementBack = stO;
                                defaultInit = " = new System.Collections.Generic.List <" + st.Name + XMLAtt +">();";
                                return "System.Collections.Generic.List<" + st.Name + XMLAtt +">" + prepis;
                            }
                            else
                            {
                                Idaprop.IsList = true;
                                Idaprop.CodeElementInList = st;
                                Idaprop.CodeElementBack = stO;
                                if(st != null) 
                                {
                                    defaultInit = " = SimpleStructModelFactory.Create" + st.Name + "();";
                                    //attribute = "[IdeaXMLSSM(\"" + st.Name + "\")]";
                                }
                                defaultInit = " = new System.Collections.Generic.List<ReferenceElement>();";
                                return "System.Collections.Generic.List<ReferenceElement>";
                            }
                        }
                        CodeElement stC2;
                        structInBTProject.TryGetValue(Idaprop.myCodeProperty.Type.AsFullName, out stO);
                        stC2 = stO;
                        prepis = string.Empty;
                        if(stC2 != null && !exA)
                        {
                            if (stC2 is EnvDTE.CodeInterface)
                            {
                                AddToDebug("Hledám Interface ze by tady"+ Idaprop.myCodeProperty.Type.AsFullName + "[" + stC2.Name + "]");
                                EnvDTE.CodeElement stCc =  FindClassFromInterface(Idaprop.myCodeProperty.Type.AsFullName);
                                if (stCc != null)
                                {
                                    stC2 = stCc;
                                    defaultInit = " = SimpleStructModelFactory.Create" + stC2.Name + "();";
                                    //attribute = "[IdeaXMLSSM(\"" + stC2.Name + "\")]";
                                    AddToDebug("attribute   "+ attribute );
                                    prepis ="";// "/* prepis Interface */";
                                }
                            }
                            Idaprop.CodeElementBack = stO;
                            Idaprop.IsReferenced = true;
                            defaultInit = " = SimpleStructModelFactory.Create"+ stC2.Name + XMLAtt +"();";
                            return stC2.Name + XMLAtt;
                        }
                        else
                        {
                            if(Idaprop.myCodeProperty.Type.CodeType.Name.ToString() == "String")
                            {
                                defaultInit = " = \" Text default\";";
                                return "System.String";
                            }
                            defaultInit = " = new ReferenceElement();";
                            //attribute = "[IdeaXMLSSM(\"" + Idaprop.myCodeProperty.Type.CodeType.Name.ToString() + "\")]";
                            return "ReferenceElement";
                        }
                        break;
                    case vsCMElement.vsCMElementStruct:
                        if(Idaprop.myCodeProperty.Type.CodeType.Name.ToString() == "Double")
                        {
                            double r = RandomDouble(1, 1000);
                            string s = string.Format("{0}", r);
						    s = s.Replace(',', '.');
                            defaultInit = " = " + s + ";";
                            return "System.Double";
                        }
                        if(Idaprop.myCodeProperty.Type.CodeType.Name.ToString() == "Int32")
                        {
                            defaultInit = " = 2;";
                            return "System.Int32";
                        }
                        if(Idaprop.myCodeProperty.Type.CodeType.Name.ToString() == "Int64")
                        {
                            defaultInit = " = 3;";
                            return "System.Int64";
                        }
                        if(Idaprop.myCodeProperty.Type.CodeType.Name.ToString() == "Boolean")
                        {
                            defaultInit = " = true;";
                            return "System.Boolean";
                        }

                        CodeElement stCt2;
                        structInBTProject.TryGetValue(Idaprop.myCodeProperty.Type.AsFullName, out stO);
                        stCt2 = stO;
                        prepis = string.Empty;
                        if(stCt2 != null && !exA)
                        {
                            if (stCt2 is EnvDTE.CodeInterface)
                            {
                                AddToDebug("Hledám Interface tady 2"+ Idaprop.myCodeProperty.Type.AsFullName + "[" + stCt2.Name + "]");
                                EnvDTE.CodeElement stCc =  FindClassFromInterface(Idaprop.myCodeProperty.Type.AsFullName);
                                if (stCc != null)
                                {
                                    stCt2 = stCc;
                                    //attribute = "[IdeaXMLSSM(\"" + stCt2.Name + "\")]";
                                    defaultInit = " = new " + stCt2.Name + "();";
                                    prepis ="";// "/* prepis Interface */";
                                }
                            }
                            Idaprop.CodeElementBack = stO;
                            Idaprop.IsReferenced = true;
                            return stCt2.Name + XMLAtt;
                        }
                        else
                        {
                            if(Idaprop.myCodeProperty.Type.CodeType.Name.ToString() == "String")
                            {
                                defaultInit = " = \" Text default\";";
                                return "System.String";
                            }
                            if(stCt2 != null)
                            {
                                defaultInit = " = new " + stCt2.Name + "();";
                                //attribute = "[IdeaXMLSSM(\"" + stCt2.Name + "\")]";
                            }
                            else
                            {
                                defaultInit = " = new " + Idaprop.myCodeProperty.Type.CodeType.Name.ToString() + "();";
                                //attribute = "[IdeaXMLSSM(\"" + Idaprop.myCodeProperty.Type.CodeType.Name.ToString() + "\")]";
                            }
                            return "ReferenceElement";
                        }
                }
                //if(Idaprop.myCodeProperty.Type.CodeType.Name.ToString() == "List")
                //{
                //	return "System.Collections.Generic.List<System.Int32>";
                //}
            }
        }
        return ret;
    }

    Random rnd = new Random();
    double RandomDouble(double min, double max)
    {
    	int interval = rnd.Next((int)(min * 1000), (int)(max * 1000));  // 120s - 600s
        return ((double)interval / 1000);
    }

    EnvDTE.CodeElement FindClassFromInterface(string interf)
    {
        foreach (var item in structInBTProject)
        {
            if (item.Value is CodeClass)
            {
                //AddToDebug("CodeClass : " + item.Value.FullName.ToString() + " / " +  item.Value.Name.ToString());
                foreach (CodeInterface iface in (item.Value as CodeClass).ImplementedInterfaces)
                {
                    if (iface.FullName == interf)
                    {
                        AddToDebug("Našel Base ImplementedInterfaces : " + iface.FullName.ToString() + " / " +  iface.Name.ToString());
                        AddToDebug("Našel Base Class : " + item.Value.FullName.ToString() + " / " +  item.Value.Name.ToString());
                        return item.Value;
                    }
                }
                foreach (EnvDTE.CodeElement bc in (item.Value as CodeClass).Bases)
                {
                    //AddToDebug("Base CodeClass : " + bc.FullName.ToString() + " / " +  bc.Name.ToString());
                    if (bc.FullName == interf)
                    {
                        return item.Value;
                    }
                }
            }
        }
        return null;
    }

    void AddToDebug(string text)
    {
        debugBuilder.AppendLine(text);
        Debug.WriteLine(text);
    }

    void AddElementToFile(KeyValuePair<string, CodeElementIDEA> rec, StringBuilder utXMLBuilder)
    {
        AddToDebug(" AddElementToFile" + rec.Key);
        string docComment = null;
        string name = "partial class ";
        if(rec.Value.CodeElement is CodeInterface)
            docComment = (rec.Value.CodeElement as CodeInterface).DocComment;
        if(rec.Value.CodeElement is CodeClass)
            docComment = (rec.Value.CodeElement as CodeClass).DocComment;
        if(rec.Value.CodeElement is CodeEnum)
        {
            docComment = (rec.Value.CodeElement as CodeEnum).DocComment;
            name = "enum ";
        }
        if(rec.Value.CodeElement is CodeStruct)
        {
            docComment = (rec.Value.CodeElement as CodeStruct).DocComment;
            name = "struct ";
        }
        string clsComment = FormatComment(docComment, "\t\t\t");
        if(!string.IsNullOrEmpty(clsComment))
        {
            Write(clsComment);
        } 
        string isAbstract = string.Empty;
        bool exAbstract = false;
        bool first= true;
        if(rec.Value.CodeElement is CodeClass)
            if((rec.Value.CodeElement  as CodeClass).IsAbstract) 
            {
                isAbstract = "abstract ";
                exAbstract = true;
            }
        Write("\t\tpublic " + isAbstract + name + rec.Value.CodeElement.Name + XMLAtt); //  +"/* : SimpleElementBase*/"
        AddToDebug(" public partial " + name + "  ???" + rec.Value.CodeElement.Name + XMLAtt);  //  +"/* : SimpleElementBase*/"
        foreach (CodeElementIDEA baseC in rec.Value.ListCodeElementIDEABases)
        {
            //if(baseC.CodeElement is CodeEnum)
            //{
            //continue;
            //}
            if (baseC.CodeElement == null)
                AddToDebug(" NULL Bases class  ???");
            else
            {
                AddToDebug(" Bases class  : " + baseC.CodeElement.Name);
                if(first) Write(" : " + baseC.CodeElement.Name);
                else Write(" , " + baseC.CodeElement.Name);
                first = false;
            }

        }
        WriteLine("\t\t{");
        AddToDebug(" ****  " + name + "  : " + rec.Value.CodeElement.Name);

        //        Write("\t\t\tpublic " + rec.Value.CodeElement.Name + XMLAtt +"(");
        //        bool firstInSequence = true;
        //        StringBuilder factoryHeader = new StringBuilder();
        //        StringBuilder factoryHeaderName = new StringBuilder();
        //        foreach (var prop in rec.Value.ListCodePropertyIDEA)
        //        {
        //            if(prop.myCodeProperty != null)
        //            {
        //                if(prop.myCodeProperty.Name == "this")
        //                    continue;
        //                if (prop.myCodeProperty.Setter == null)
        //                    continue;
        //                if (!firstInSequence) 
        //                { 
        //                    Write(", "); 
        //                    factoryHeader.Append(", ");
        //                    factoryHeaderName.Append(", ");
        //                }
        //                string att = string.Empty; 
        //                string typeName = GetTypeName(prop, ref att);
        //                Write(typeName);
        //                factoryHeader.Append(typeName);
        //        
        //                Write(" ");
        //                factoryHeader.Append(" ");
        //                Write((CamelCase(prop.myCodeProperty.Name)));
        //                factoryHeader.Append((CamelCase(prop.myCodeProperty.Name)));
        //                factoryHeaderName.Append((CamelCase(prop.myCodeProperty.Name)));
        //                firstInSequence = false;
        //            }
        //            if(prop.myCodeVariable != null)
        //            {
        //                if(prop.myCodeVariable.Access != vsCMAccess.vsCMAccessPublic)
        //                    continue;
        //                if (!firstInSequence) 
        //                { 
        //                    Write(", "); 
        //                    factoryHeader.Append(", ");
        //                    factoryHeaderName.Append(", ");
        //                }
        //                string typeName = prop.myCodeVariable.Type.AsFullName;
        //                Write(typeName);
        //                factoryHeader.Append(typeName);
        //        
        //                Write(" ");
        //                factoryHeader.Append(" ");
        //                Write((CamelCase(prop.myCodeVariable.Name)));
        //                factoryHeader.Append((CamelCase(prop.myCodeVariable.Name)));
        //                factoryHeaderName.Append((CamelCase(prop.myCodeVariable.Name)));
        //                firstInSequence = false;
        //            }
        //        }
        //        WriteLine(")");
        //        WriteLine("\t\t\t{");
        //        foreach (var prop in rec.Value.ListCodePropertyIDEA)
        //        {
        //            if(prop.myCodeProperty != null)
        //            {
        //                if(prop.myCodeProperty.Name == "this")
        //                    continue;
        //        
        //                if (prop.myCodeProperty.Setter == null)
        //                    continue;
        //                if(prop.myCodeProperty.Name == "Type")
        //                    WriteLine("\t\t\t\tthis." + prop.myCodeProperty.Name + "T = " + CamelCase(prop.myCodeProperty.Name) + ";");
        //                else
        //                    WriteLine("\t\t\t\tthis." + prop.myCodeProperty.Name + " = " + CamelCase(prop.myCodeProperty.Name) + ";");
        //            }
        //            if(prop.myCodeVariable != null)
        //            {
        //                if(prop.myCodeVariable.Access == vsCMAccess.vsCMAccessPublic)
        //                {
        //                    WriteLine("\t\t\t\tthis." + prop.myCodeVariable.Name + " = " + CamelCase(prop.myCodeVariable.Name) + ";");
        //                }
        //            }
        //        }
        //        WriteLine("\t\t\t}");

        //        if(!firstInSequence)
        //        {
        if(!(rec.Value.CodeElement is CodeEnum) && !(rec.Value.CodeElement is CodeStruct))
        {
            WriteLine("\t\t\tpublic " + rec.Value.CodeElement.Name + XMLAtt +"()");
            WriteLine("\t\t\t{");
            WriteLine("\t\t\t}");
            WriteLine("");
            if(!exAbstract) WriteLine("\t\t\tpublic System.Int32 Id {get; set;}");
        }
        StringBuilder utXMLBuilderProp = new StringBuilder();

        //        }


        foreach (var prop in rec.Value.ListCodePropertyIDEA)
        {
            if(prop.myCodeProperty != null)
            {
                if(prop.myCodeProperty.Name == "this")
                    continue;

                if (prop.myCodeProperty.Setter == null)
                    continue;

                string comment = FormatComment(prop.myCodeProperty.DocComment, "\t\t\t");
                if(!string.IsNullOrEmpty(comment))
                {
                    Write(comment);
                }
                if(prop.CodeElementBack != null)
                {
                    WriteLine("\t\t\t// Id of " + prop.CodeElementBack.FullName);
                }
                string att = string.Empty;
                string defaultInit = string.Empty;
                bool isNew= false;
                string typeName = GetTypeNameMain(prop, ref att, ref defaultInit, ref isNew);
                AddToDebug("prop.myCodeProperty.Type.AsFullName : " + typeName + "  " + prop.myCodeProperty.Name);
                string propText;
                //if(prop.myCodeProperty.Name == "Type")
                //propText = string.Format("\t\t\tpublic {0} {1} {{get; set;}}", typeName, prop.myCodeProperty.Name+"T");
                //else
                if(att.Length > 1) WriteLine("\t\t\t" + att);
                propText = string.Format("\t\t\tpublic {0} {1} {{get; set;}}", typeName, prop.myCodeProperty.Name);
                if(defaultInit.Length > 1) {
                    utXMLBuilderProp.AppendLine("\t\t\tret." + prop.myCodeProperty.Name + defaultInit);
                    //if(isNew)  
                    //utXMLBuilderProp.AppendLine("\t\t\t\tret.InitDefault();");
                }
                WriteLine(propText);
                WriteLine("");
            }
            if(prop.myCodeVariable != null)
            {

                if(prop.myCodeVariable.Access == vsCMAccess.vsCMAccessPublic)
                {
                    string typeName = prop.myCodeVariable.Type.AsFullName;
                    //Debug.WriteLine("prop.myCodeVariable.FullName : " + typeName + "  " + prop.myCodeVariable.Name);
                    string comment = FormatComment(prop.myCodeVariable.DocComment, "\t\t\t");
                    if(!string.IsNullOrEmpty(comment))
                    {
                        Write(comment);
                    }
                    if(rec.Value.CodeElement is CodeEnum)
                    {
                        string propText = string.Format("\t\t\t{0},", prop.myCodeVariable.Name);
                        WriteLine(propText);
                    }
                    else
                    {
                        string propText = string.Format("\t\t\tpublic {0} {1} {{get; set;}}", typeName, prop.myCodeVariable.Name);
                        double r = RandomDouble(1, 1000);
                        string s = string.Format("{0}", r);
//					    if (replace)
					    {
						    s = s.Replace(',', '.');
					    }

                        utXMLBuilderProp.AppendLine("\t\t\tret." + prop.myCodeVariable.Name + " = " + s +";");
                        WriteLine(propText);
                    }
                    WriteLine("");
                }
            }

        }
        if(!(rec.Value.CodeElement is CodeEnum) && !(rec.Value.CodeElement is CodeStruct))
        {
            if(!exAbstract) 
            {
                utXMLBuilder.AppendLine("");
                utXMLBuilder.AppendLine("\t\tpublic static "+rec.Value.CodeElement.Name + XMLAtt +" Create" + rec.Value.CodeElement.Name + XMLAtt +"()");
                utXMLBuilder.AppendLine("\t\t{");
                utXMLBuilder.AppendLine("\t\t\t\tvar ret = new " + rec.Value.CodeElement.Name + XMLAtt +"();");
                utXMLBuilder.AppendLine("\t\t\t\tInitDefault(ret);");
                utXMLBuilder.AppendLine("\t\t\t\treturn ret;");
                utXMLBuilder.AppendLine("\t\t}");
                if(!(rec.Value.CodeElement is CodeEnum))  
                {
                    utXMLBuilder.AppendLine("\t\tpublic static void InitDefault(" + rec.Value.CodeElement.Name + XMLAtt + " ret) {");
                    utXMLBuilder.AppendLine(utXMLBuilderProp.ToString());
                    utXMLBuilder.AppendLine("\t\t}");
                }
            }


        }

        //WriteLine("\t\t\tpublic override Type GetStructClsType()");
        //WriteLine("\t\t\t{");
        //WriteLine(string.Format("\t\t\t\treturn Type.GetType(\"{0},{1}\");", rec.Value.CodeElement.FullName, "CI.StructModel.Loading"));
        //WriteLine("\t\t\t}");
        //WriteLine("");
        //
        

        //WriteLine("\t\t\tpublic override void CopyToSM(object destination)");
        //WriteLine("\t\t\t{");
        //
        //WriteLine("      dynamic dynamicDest = destination;");
        //foreach (var prop in rec.Value.ListCodePropertyIDEA)
        //{
        //if(prop.myCodeProperty != null)
        //{
        //if (prop.myCodeProperty.Setter == null)
        //continue;
        //
        //if(prop.myCodeProperty.Name == "this")
        //continue;
        //if (prop.IsList)
        //{
        //string propListText;
        //propListText = string.Format("      this.{0} = new System.Collections.Generic.List<{1}>();",prop.myCodeProperty.Name, prop.CodeElementInList.Name + XMLAtt);		WriteLine(propListText);
        //WriteLine(propListText);
        //}
        //else
        //{
        //string propCopyText;
        //string T = string.Empty;
        //if (prop.myCodeProperty.Name == "Type")
        //{
        //T = "T";
        //}
        //propCopyText = string.Format("      dynamicDest.{0} = this.{0};", prop.myCodeProperty.Name + T);
        //
        //WriteLine(propCopyText);
        //}
        //}
        //if(prop.myCodeVariable != null)
        //{
        //if(prop.myCodeVariable.Access == vsCMAccess.vsCMAccessPublic)
        //{
        //string propCopyText = string.Format("      dynamicDest.{0} = this.{0};", prop.myCodeVariable.Name);
        //WriteLine(propCopyText);
        //}
        //}
        //}
        //
        //WriteLine("\t\t\t}");
        WriteLine("\t\t}");
    }

    private EnvDTE.vsCMElement GetCMElement(EnvDTE.CodeProperty prop)
    {
        vsCMElement ret = vsCMElement.vsCMElementProperty;
        if(prop != null && prop.Type != null ) { 
            if(prop.Type.CodeType != null) {
                return prop.Type.CodeType.Kind;
            }
        }
        return ret;
    }

    void RecurseElements(EnvDTE.CodeElements elems, int level, StringBuilder sb)
    {
        foreach (CodeElement elem in elems)
        {
            // Add element to the list of names.
            sb.Append(' ', level * 8);
            var prop = elem as CodeProperty;
            sb.Append(elem.Name + " [" + elem.Kind.ToString() + "]");
            Debug.WriteLine(elem.Name + " [" + elem.Kind.ToString() + "]");
            if(prop != null && prop.Type != null ) { 
                sb.Append(" [prop.Type "+ prop.Type.AsString + "]");
                Debug.WriteLine(" [prop.Type "+ prop.Type.AsString + "]");
                //	        if(elem.IsCodeType && prop.Type.ElementType != null)
                //						sb.Append(" [Type.ElementType "+ prop.Type.ElementType.ToString() + "]");

                if(prop.Type.CodeType != null) {
                    sb.Append(" [prop.Type.CodeType "+ prop.Type.CodeType.Name.ToString() + " - " + prop.Type.CodeType.FullName + "]");
                    Debug.WriteLine(" [prop.Type.CodeType "+ prop.Type.CodeType.Name.ToString() + " - " + prop.Type.CodeType.FullName + "]");
                    sb.Append(" [prop.Type.CodeType.Kind "+ prop.Type.CodeType.Kind.ToString() + "]");
                    Debug.WriteLine(" [prop.Type.CodeType.Kind "+ prop.Type.CodeType.Kind.ToString() + "]");
                    //						if (prop.Type.CodeType.IsCodeType)
                    //							RecurseElements(((CodeType)prop.Type.CodeType).Members, level + 1, sb);
                }
                if(prop.Type.TypeKind != null)
                {
                    sb.Append(" [prop.Type.TypeKind "+ prop.Type.TypeKind.ToString() + "]");
                    Debug.WriteLine(" [prop.Type.TypeKind "+ prop.Type.TypeKind.ToString() + "]");
                }
            }
            sb.Append("\n");

            // Call this function recursively if element has children.
            if (elem.Kind == vsCMElement.vsCMElementNamespace)
                RecurseElements(((EnvDTE.CodeNamespace)elem).Members, 
                    level + 1, sb);
            else 
                if (elem.IsCodeType)
                RecurseElements(((CodeType)elem).Members, level + 1, sb);

        }
    }

    private static string GetTypeNameSimple(Type type) 
    {
        switch (type.Name)
        {
            case "String":
                return "string";
            case "Int16":
                return "short";
            case "Int32":
                return "int";
            case "Int64":
                return "long";
            case "Boolean":
                return "bool";
            case "Single":
                return "float";
            case "Double":
                return "double";
            case "Decimal":
                return "decimal";
            case "Byte[]":
                return "byte[]";
        }
 
        var nullableType = Nullable.GetUnderlyingType(type);
        if (nullableType != null)
        {
            return GetTypeNameSimple(nullableType) + "?";
        }
 
        if (type.IsGenericType)
        {
            var sb = new System.Text.StringBuilder();
            sb.Append(type.Name.Substring(0, type.Name.IndexOf("`")));
            sb.Append("<");
 
            bool isFirstArgument = true;
            foreach (Type arg in type.GetGenericArguments())
            {
                if (!isFirstArgument)
                {
                    sb.Append(",");
                }
                sb.Append(GetTypeNameSimple(arg));
                isFirstArgument = false;
            }
 
            sb.Append(">");
            return sb.ToString();
        }
 
        return type.Name;
    }

#>
