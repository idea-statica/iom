<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="envdte" #>
<#@ assembly name="envdte80" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ include file="ProjectHelpers.tt" #>
<#@ include file="ProcessTemplate.tt" #>
<#
var serviceProvider = (IServiceProvider)this.Host;
// Get the automation root object
var dte = (EnvDTE.DTE)serviceProvider.GetService(typeof(EnvDTE.DTE));

Project foundProj = FindProjectInSolution(dte, "CI.Geometry2D");
if(foundProj != null)
{
	WriteLine("using System;");
	WriteLine("");
	WriteLine("namespace IdeaRS.SimpleStructModel");
	WriteLine("{");
	List<CodeClass> classesInProject = GetAllClasses(foundProj.ProjectItems);

	Dictionary<string, Tuple<CodeClass, List<CodeProperty>>> clsPropDictionary = new Dictionary<string, Tuple<CodeClass, List<CodeProperty>>>();

	// get all shapes
	foreach(var cls in classesInProject)
	{
		if(cls.Name.Equals("Region2D"))
		{
				continue;
		}

		if(cls.IsDerivedFrom["CI.Geometry2D.Region2D"])
		{
			Tuple<CodeClass, List<CodeProperty>> clsRecord;
			if(!clsPropDictionary.TryGetValue(cls.FullName, out clsRecord))
			{
				clsRecord = new Tuple<CodeClass, List<CodeProperty>>(cls, new List<CodeProperty>());
				clsPropDictionary.Add(cls.FullName, clsRecord);
			}

			foreach (var ce in cls.Members)
			{
				var prop = ce as CodeProperty;
				if (prop != null)
				{
					string propType = prop.Type.AsFullName;
					if(!(propType.Equals("System.Double") || propType.Equals("System.Int32")))
					{
						continue;
					}
					clsRecord.Item2.Add(prop);
				}
			}
		}
	}

	foreach(var rec in clsPropDictionary)
	{
			string clsComment = FormatComment(rec.Value.Item1.DocComment, "    ");
			if(!string.IsNullOrEmpty(clsComment))
			{
					Write(clsComment);
			}

			WriteLine("  public partial class " + rec.Value.Item1.Name + ": SimpleElementBase");
			WriteLine("  {");

			foreach (var prop in rec.Value.Item2)
			{
					string comment = FormatComment(prop.DocComment, "    ");
					if(!string.IsNullOrEmpty(comment))
					{
						Write(comment);
					}

					string propText = string.Format("    public {0} {1} {{get; set;}}", prop.Type.AsFullName, prop.Name);
					WriteLine(propText);
					WriteLine("");
			}

			WriteLine("    public override Type GetStructClsType()");
			WriteLine("    {");
			WriteLine(string.Format("      return Type.GetType(\"{0},{1}\");", rec.Value.Item1.FullName, "CI.Geometry2D"));
			WriteLine("    }");
			WriteLine("");
			WriteLine("    public override void CopyToSM(object destination)");
			WriteLine("    {");
			WriteLine("      dynamic dynamicDest = destination;");
			foreach (var prop in rec.Value.Item2)
			{
					string propCopyText = string.Format("      dynamicDest.{0} = this.{0};", prop.Name);
					WriteLine(propCopyText);
			}
			WriteLine("    }");
			WriteLine("  }");
	}

	WriteLine("}");
	WriteLine("");
	WriteLine("");

CallContext.SetData("SimpleCssFactory.Parameter", clsPropDictionary);
ProcessTemplate("SimpleCssFactory.tt", "SimpleCssFactory.cs");
}
#>