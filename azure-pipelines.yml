# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

#trigger:
#- master

variables:
  majorVersion: 20
  minorVersion: 1
  myBuildId: $[counter('', 1)]

  outputDirectory: '$(Build.SourcesDirectory)\bin\$(buildConfiguration)'
  myBuildName: $(majorVersion).$(minorVersion).$(myBuildId)
  name: '$(majorVersion).$(minorVersion).$(myBuildId)'
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

name: '$(majorVersion).$(minorVersion).$(myBuildId)'

stages:
- stage: BuildSolutions
  displayName: Building Solutions

  pool:
    vmImage: 'windows-latest'

  jobs:
    - job: BuildSolution
      displayName: Building solution

      steps:
        - checkout: self
        - task: NuGetToolInstaller@1

        - task: NuGetCommand@2
          inputs:
            restoreSolution: '$(solution)'

        - powershell: |
            Write-Host "Using an input-macro works: $(outputDirectory)"

        - task: Assembly-Info-NetCore@2
          inputs:
            Path: '$(Build.SourcesDirectory)'
            FileNames: '**/*.csproj'
            InsertAttributes: true
            FileEncoding: 'auto'
            WriteBOM: true
            GeneratePackageOnBuild: false
            PackageId: 'IdeaStatiCa.OpenModel'
            Authors: 'IDEA StatiCa'
            Company: 'IDEA StatiCa'
            Product: 'IdeaStatiCa.OpenModel'
            PackageProjectUrl: 'https://github.com/idea-statica/iom'
            RepositoryUrl: 'https://github.com/idea-statica/iom'
            VersionNumber: $(myBuildName)
            FileVersionNumber: $(myBuildName)
            PackageVersion: $(myBuildName)
            InformationalVersion: $(myBuildName)
            RepositoryType: git
            LogLevel: 'verbose'
            FailOnWarning: false
            DisableTelemetry: false
            
        - task: VSBuild@1
          inputs:
            solution: '$(solution)'
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
            maximumCpuCount: true
            logProjectEvents: false

        - task: NuGetCommand@2
          inputs:
            command: 'pack'
            packagesToPack: '**/*.csproj'
            versioningScheme: 'byBuildNumber'
            includeSymbols: true
            verbosityPack: Detailed
            packDestination: '$(outputDirectory)'

#- task: VSTest@2
#  inputs:
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'

#- stage: DeploySolution
#  displayName: Deploying Solutions

#  pool:
#    vmImage: 'windows-latest'
#  dependsOn: BuildSolutions
#  jobs:
#    - job: DeployingSolution
#      displayName: Deploying solution
#      steps:
#       - checkout: none
        - task: ArchiveFiles@2
          displayName: 'Archiving files $(outputDirectory) to $(Build.ArtifactStagingDirectory)/IOM_$(myBuildName).7z'
          inputs:
            rootFolderOrFile: '$(outputDirectory)'
            includeRootFolder: false
            archiveType: '7z'
            archiveFile: '$(outputDirectory)/IOM_$(myBuildName).7z'
            replaceExistingArchive: true

#- task: CopyFiles@2
#  enabled: true
#  displayName: 'Copy built files from $(outputDirectory) to $(Build.ArtifactStagingDirectory)'
#  inputs:
#    SourceFolder: '$(outputDirectory)'
#    Contents: |
#      **\?(*.exe|*.dll|*.db|*.config|*.chm|*.pdf)
#      !**\?(UT_*|AT_*)
#    TargetFolder: '$(Build.ArtifactStagingDirectory)'
#    CleanTargetFolder: true

        - publish: '$(outputDirectory)/IOM_$(myBuildName).7z'
          displayName: 'Publishing IOM IOM_$(myBuildName)'
          artifact: Binaries

# The last task is a nuget command, nuget push
# This will push any .nupkg files to the 'TestFeed' artifact feed
# allowPackageConflicts allows us to build the same version and not throw an error when trying to push
# instead it just ingores the latest package unless the version changes
#        - task: NuGetCommand@2
#          displayName: 'nuget push'
#          inputs:
#            command: 'push'
#            feedsToUse: 'select'
#            packagesToPush: $(outputDirectory)/**/*.nupkg'
#            nuGetFeedType: 'internal'
#            publishVstsFeed: 'mp-feed'
#            versioningScheme: 'off'
#            allowPackageConflicts: true